// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Rcpp_ada_parse
List Rcpp_ada_parse(const CharacterVector& input_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_parse(SEXP input_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type input_vec(input_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_parse(input_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_credentials
LogicalVector Rcpp_ada_has_credentials(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_credentials(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_credentials(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_empty_hostname
LogicalVector Rcpp_ada_has_empty_hostname(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_empty_hostname(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_empty_hostname(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_hostname
LogicalVector Rcpp_ada_has_hostname(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_hostname(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_hostname(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_non_empty_username
LogicalVector Rcpp_ada_has_non_empty_username(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_non_empty_username(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_non_empty_username(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_non_empty_password
LogicalVector Rcpp_ada_has_non_empty_password(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_non_empty_password(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_non_empty_password(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_port
LogicalVector Rcpp_ada_has_port(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_port(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_port(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_hash
LogicalVector Rcpp_ada_has_hash(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_hash(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_hash(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_has_search
LogicalVector Rcpp_ada_has_search(const CharacterVector& url_vec);
RcppExport SEXP _adaR_Rcpp_ada_has_search(SEXP url_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_has_search(url_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_href
CharacterVector Rcpp_ada_get_href(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_href(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_href(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_username
CharacterVector Rcpp_ada_get_username(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_username(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_username(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_password
CharacterVector Rcpp_ada_get_password(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_password(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_password(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_port
CharacterVector Rcpp_ada_get_port(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_port(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_port(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_hash
CharacterVector Rcpp_ada_get_hash(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_hash(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_hash(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_host
CharacterVector Rcpp_ada_get_host(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_host(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_host(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_hostname
CharacterVector Rcpp_ada_get_hostname(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_hostname(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_hostname(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_pathname
CharacterVector Rcpp_ada_get_pathname(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_pathname(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_pathname(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_search
CharacterVector Rcpp_ada_get_search(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_search(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_search(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_get_protocol
CharacterVector Rcpp_ada_get_protocol(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_get_protocol(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_get_protocol(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_href
CharacterVector Rcpp_ada_set_href(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_href(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_href(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_username
CharacterVector Rcpp_ada_set_username(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_username(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_username(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_password
CharacterVector Rcpp_ada_set_password(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_password(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_password(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_port
CharacterVector Rcpp_ada_set_port(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_port(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_port(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_host
CharacterVector Rcpp_ada_set_host(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_host(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_host(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_hostname
CharacterVector Rcpp_ada_set_hostname(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_hostname(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_hostname(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_pathname
CharacterVector Rcpp_ada_set_pathname(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_pathname(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_pathname(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_protocol
CharacterVector Rcpp_ada_set_protocol(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_protocol(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_protocol(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_search
CharacterVector Rcpp_ada_set_search(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_search(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_search(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_set_hash
CharacterVector Rcpp_ada_set_hash(const CharacterVector& url_vec, const CharacterVector& subst, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_set_hash(SEXP url_vecSEXP, SEXP substSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type subst(substSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_set_hash(url_vec, subst, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_clear_port
CharacterVector Rcpp_ada_clear_port(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_clear_port(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_clear_port(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_clear_hash
CharacterVector Rcpp_ada_clear_hash(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_clear_hash(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_clear_hash(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_ada_clear_search
CharacterVector Rcpp_ada_clear_search(const CharacterVector& url_vec, bool decode);
RcppExport SEXP _adaR_Rcpp_ada_clear_search(SEXP url_vecSEXP, SEXP decodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type url_vec(url_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type decode(decodeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_ada_clear_search(url_vec, decode));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_url_decode2
CharacterVector Rcpp_url_decode2(CharacterVector& url);
RcppExport SEXP _adaR_Rcpp_url_decode2(SEXP urlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type url(urlSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_url_decode2(url));
    return rcpp_result_gen;
END_RCPP
}
// url_reverse
CharacterVector url_reverse(CharacterVector& urls);
RcppExport SEXP _adaR_url_reverse(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(url_reverse(urls));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_adaR_Rcpp_ada_parse", (DL_FUNC) &_adaR_Rcpp_ada_parse, 2},
    {"_adaR_Rcpp_ada_has_credentials", (DL_FUNC) &_adaR_Rcpp_ada_has_credentials, 1},
    {"_adaR_Rcpp_ada_has_empty_hostname", (DL_FUNC) &_adaR_Rcpp_ada_has_empty_hostname, 1},
    {"_adaR_Rcpp_ada_has_hostname", (DL_FUNC) &_adaR_Rcpp_ada_has_hostname, 1},
    {"_adaR_Rcpp_ada_has_non_empty_username", (DL_FUNC) &_adaR_Rcpp_ada_has_non_empty_username, 1},
    {"_adaR_Rcpp_ada_has_non_empty_password", (DL_FUNC) &_adaR_Rcpp_ada_has_non_empty_password, 1},
    {"_adaR_Rcpp_ada_has_port", (DL_FUNC) &_adaR_Rcpp_ada_has_port, 1},
    {"_adaR_Rcpp_ada_has_hash", (DL_FUNC) &_adaR_Rcpp_ada_has_hash, 1},
    {"_adaR_Rcpp_ada_has_search", (DL_FUNC) &_adaR_Rcpp_ada_has_search, 1},
    {"_adaR_Rcpp_ada_get_href", (DL_FUNC) &_adaR_Rcpp_ada_get_href, 2},
    {"_adaR_Rcpp_ada_get_username", (DL_FUNC) &_adaR_Rcpp_ada_get_username, 2},
    {"_adaR_Rcpp_ada_get_password", (DL_FUNC) &_adaR_Rcpp_ada_get_password, 2},
    {"_adaR_Rcpp_ada_get_port", (DL_FUNC) &_adaR_Rcpp_ada_get_port, 2},
    {"_adaR_Rcpp_ada_get_hash", (DL_FUNC) &_adaR_Rcpp_ada_get_hash, 2},
    {"_adaR_Rcpp_ada_get_host", (DL_FUNC) &_adaR_Rcpp_ada_get_host, 2},
    {"_adaR_Rcpp_ada_get_hostname", (DL_FUNC) &_adaR_Rcpp_ada_get_hostname, 2},
    {"_adaR_Rcpp_ada_get_pathname", (DL_FUNC) &_adaR_Rcpp_ada_get_pathname, 2},
    {"_adaR_Rcpp_ada_get_search", (DL_FUNC) &_adaR_Rcpp_ada_get_search, 2},
    {"_adaR_Rcpp_ada_get_protocol", (DL_FUNC) &_adaR_Rcpp_ada_get_protocol, 2},
    {"_adaR_Rcpp_ada_set_href", (DL_FUNC) &_adaR_Rcpp_ada_set_href, 3},
    {"_adaR_Rcpp_ada_set_username", (DL_FUNC) &_adaR_Rcpp_ada_set_username, 3},
    {"_adaR_Rcpp_ada_set_password", (DL_FUNC) &_adaR_Rcpp_ada_set_password, 3},
    {"_adaR_Rcpp_ada_set_port", (DL_FUNC) &_adaR_Rcpp_ada_set_port, 3},
    {"_adaR_Rcpp_ada_set_host", (DL_FUNC) &_adaR_Rcpp_ada_set_host, 3},
    {"_adaR_Rcpp_ada_set_hostname", (DL_FUNC) &_adaR_Rcpp_ada_set_hostname, 3},
    {"_adaR_Rcpp_ada_set_pathname", (DL_FUNC) &_adaR_Rcpp_ada_set_pathname, 3},
    {"_adaR_Rcpp_ada_set_protocol", (DL_FUNC) &_adaR_Rcpp_ada_set_protocol, 3},
    {"_adaR_Rcpp_ada_set_search", (DL_FUNC) &_adaR_Rcpp_ada_set_search, 3},
    {"_adaR_Rcpp_ada_set_hash", (DL_FUNC) &_adaR_Rcpp_ada_set_hash, 3},
    {"_adaR_Rcpp_ada_clear_port", (DL_FUNC) &_adaR_Rcpp_ada_clear_port, 2},
    {"_adaR_Rcpp_ada_clear_hash", (DL_FUNC) &_adaR_Rcpp_ada_clear_hash, 2},
    {"_adaR_Rcpp_ada_clear_search", (DL_FUNC) &_adaR_Rcpp_ada_clear_search, 2},
    {"_adaR_Rcpp_url_decode2", (DL_FUNC) &_adaR_Rcpp_url_decode2, 1},
    {"_adaR_url_reverse", (DL_FUNC) &_adaR_url_reverse, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_adaR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
